2.6　输入和输出!
(1) 使用标准输入/输出
	头文件：<cstdio>
	变量约定：FILE *fin, *fout;——fin、fout分别代表输入文件和输出文件。
	把它们换成stdin和stdout，就是从屏幕输入和从屏幕输出。
	1.输出字符串或变量的值：printf("格式字符串", ……);
	或fprintf(fout, "格式字符串", ……);
	格式字符："%"后连接一个字母。
	字符	    含义	
	 d	        整数 	
	 u	     无符号整数	
	 o	     八进制整数	
	 x  	 十六进制整数
	 e	 科学记数法表示的浮点数
	 f	       浮点数
	 c	        字符
	 s	 字符串(字符数组)
	常见的修饰符：(对输出进行格式控制，重要！！)
		%5d：5位数，右对齐。不足5位用空格补齐，超过5位按实际位数输出。
		%-5d：5位数，左对齐。不足5位用空格补齐，超过5位按实际位数输出。
		%05d：5位数，右对齐。不足5位用'0'补齐，超过5位按实际位数输出。
		%+d：无论是正数还是负数，都要把符号输出。
		%.2f：保留2位小数。如果小数部分超过2位就四舍五入，否则用0补全。
	2.输入到变量
	读取不含空白的内容：scanf("格式字符串", &……);
	    或fscanf(fin, "格式字符串", &……); 
	① 格式字符和printf基本一致。
	② 不要忘记"&"！printf传的是值，scanf传的是地址！
	③ scanf和fscanf的返回值是：成功输入的变量个数。fscanf返回EOF，表示文件结束。
	④ scanf和fscanf忽略TAB、空格、回车。遇到这些字符它们就停止读取。
		读取单个字符：fgetc(fin); 
	首先要判断它是否为EOF(文件结束)。如果不是，就可以用强制类型转换变成char。
	读取到行末时，要注意对换行符的处理。
		Windows、Linux、Mac的回车字符是不同的。
		Linux是'\n'，Mac是'\r'，Windows下是两个字符——'\r'和'\n'。

(2) 使用流输入/输出
	头文件：<iostream>
	1.输入到变量：cin>>n;
	2.输出到屏幕上：cout<<a;
		可以连续输入、输出，如cin>>n>>m;   cout<<a<<','<<b<<endl;
	3.换行：cout<<endl;
	4.格式化输出：推荐使用标准输出进行格式控制(因为流输出的格式控制很繁琐)。
	5.	注意，数据规模很大时，流的输入输出速度会变得很慢，甚至数据还没读完就已经超时了。
	在进行输入输出之前加入这样一条语句：ios::sync_with_stdio(false);
	调用之后，用cin、cout输入输出的速度就和scanf、printf的速度一样了。
	
(3) 高级输入输出
	在做一些数据量相当大的题时，以上两种输入输出都会造成很大耗时，需要一种更快的输入输出方式，在这里我提供标准代码，至于原理请自行查阅资料吧。
	输入优化：
	void read(int &x){  
		x=0;char c=getchar();  
		while(c<'0' || c>'9')c=getchar();  
		while(c>='0' && c<='9'){  
			x=x*10+c-'0';  
			c=getchar();  
		}   
	}  
	输出优化:
	void write(int x){  
		int y=10,len=1;  
		while(y<=x){
			y*=10;
			len++;
		}  
		while(len--){
			y/=10;
			putchar(x/y+48);
			x%=y;
		}  
	}  
