2.7　其他常用操作!
	常用的头文件：<iostream>、<cstdlib>、<cstring>、<fstream>以及<algorithm>、<stack>、<queue>、<vector>等。
	C++的流、容器、算法等都需要引用std命名空间。所以需要在#include后面、你的代码前面加上一句：
		using namespace std;
(1) 库函数
	1.数组的整体操作：
	头文件：<cstring>
		将a[]初始化：memset(a, 0, sizeof(a));
	第二个参数应该传入0、-1或0x7F。传入0或-1时，a[]中每个元素的值都是0或-1；如果传入0x7F时，那么a[]中每个元素的值都是0x7F7F7F7F(不是0x7F！)，可认为是"无穷大"。
		将a[]整体复制到b[]中：memcpy(b, a, sizeof(a));
		判断a[]和b[]是否等价：memcmp(a, b, sizeof(a));				// 返回0表示等价
	2.字符操作：
	头文件：<cctype>
		tolower(c)、toupper(c)：将c转化为小写或大写。
		isdight(c)、isalpha(c)、isupper(c)、islower(c)、isgraph(c)、isalnum(c)：
		分别判断c是否为十进制数字、英文字母、大写英文字母、小写英文字母、非空格、字母或数字。
	3.头文件：<algorithm>
		最大值/最小值：max(a,b)，min(a,b)。
		交换变量的值：swap(a,b)
	4.执行DOS命令或其他程序：system("命令行");
		头文件：<cstdlib>
		暂停屏幕：system("pause");
		！郑重警告！竞赛交卷或OJ提交代码之前必须删除system，否则会被视为作弊。
		如果使用输入重定向，那么命令提示符不会接受任何键盘输入——直接用文件内容代替键盘了。
	5.计时：double a = (double)clock() / (double)CLOCKS_PER_SEC;
		上面的a对应一个时刻。而将两个时刻相减，就是时间间隔。可用这种方法卡时。
		头文件：<ctime>
		通常在写完一个非完美算法后会通过计时判断有几个点可能通过。
	6.随机数发生器：
		头文件：<cstdlib>
		产生随机数：
	① 0~32767的随机数：rand()
	② 粗略地控制范围：rand()%范围
	   注意，这种方法产生的随机数的分布是不均匀的。
	③ 精确地控制范围：(double)rand()/RAND_MAX*范围
	④ 控制在[a, b)之间：a + (int) ((double)rand()/RAND_MAX*(b-a))
		初始化随机数种子：
	① srand(数字)：初始化随机数种子。
	② 注意，这条语句在程序开头使用，并且最多用一次。
	  同一程序、同一平台，srand中的参数相等，用rand()产生的随机数序列相同。
	③ 使随机数更加随机：引用<ctime>，然后这样初始化随机数种子，srand(time(NULL))。
	   不要在循环中使用这条语句(例如批量产生随机数据)，因为time只精确到秒。
	深刻理解，不更新种子的随机数都是一样的！！
	7.	数学函数：
		头文件：<cmath>
		abs(x)：求x的绝对值(该函数同时包含于<cstdlib>)。
		sin、cos、tan：三角函数，角的单位为弧度。
			可用atan(1)*4表示π。
		sqrt：求平方根
		ceil(x)、floor(x)：分别返回大于等于x的最小整数、小于等于x的最大整数。
			注意，参数和返回值都是浮点数类型。
		exp(x)、log(x)、log10：分别求ex、lnx、lgx
		(顺便提一句，指数可以把加法问题转化为乘法问题，对数可以把乘法问题转化为加法问题。)
		pow(a,b)：计算ab。由于精度问题，你仍然需要学会快速幂(数论算法部分会讲到)。

(2) 宏定义
	宏定义是C语言的产物。在C++中，它真的out了。
	下面介绍几种常用操作。
	1.第一种用法——配合条件编译：#define DEBUG
	定义一个叫DEBUG的标识符。它应该与#ifdef或#ifndef配合使用。举例如下：
	#define DEBUG
	#ifdef DEBUG
		void print(int v) { cout << v << endl;}
	#else
		void print(int) {}
	#endif
	如果符号DEBUG存在，那么编译器会编译上面的、能输出数值的print，否则编译器编译下面的、什么事情都不做的print。
	把上面的#ifdef换成#ifndef，那么编译的代码正好上面所说的相反。
	2.第二种用法——表达式：
	#define N		5000
	编译时，编译器会用类似于"查找和替换"的方法，把代码中的N换成5000。如果需要换成表达式，应该用括号把它们包围。例如：
	#define a			1+2
	#define b			(1+2)
	c=a*2; d=b*2;
	编译时上面一行会变成"c=1+2*2; d=(1+2)*1;"，显然它们的值是不同的。
	所以，用enum和const代替它是明智之举。
	此外，要注意表达式末尾不能有分号(除非你需要)。
	强烈建议，所有需要定义常量的，都用const声明。
	
	当然宏定义还有其他使用场景，不过因为不常用，且都有完美的替代方案，故在此不再赘述。
