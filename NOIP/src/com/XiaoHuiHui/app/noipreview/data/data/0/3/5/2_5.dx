1.4　函数
(1) 定义和使用函数
	1.定义和调用函数：下面定义了一个函数，返回值是double类型的，其中有两个参数i、j，分别是int和float类型的。
		double foo(int j, float j)
		{
			……
		}
		如果函数不需要返回任何值，可定义为void类型。
		函数的定义必须在函数调用的前面。
		只有在前面添加了函数定义，才能把具体实现放到调用的后面。
	2.返回值：return 值;
		函数是void类型的，那么return后面除了分号，什么都不跟。
		调用之后，函数立刻结束。
		不可以直接对函数名赋值(学过Pascal或Basic语言的同学要特别注意)。
	3.如果你的函数需要返回指针或引用，你必须注意：不要引用函数内部的变量！因为函数一结束，函数内部的变量就烟消云散，不复存在了。正确做法是引用静态变量(static)或全局变量。
	4.内联函数(inline)：当一个函数内部只有寥寥几句时，如"华氏度变摄氏度"，可以考虑将其定义成内联函数，通知编译器省略函数入栈等操作，直接展开函数内容，以加快运行速度。
		inline int FtoC(int f) { return (f-32)/9*5; }
	5.推荐写外函数时先声明后定义。即在主函数之前声明函数，在主函数之后定义函数。这样会使主函数更加清楚，不会造成找不到主函数的尴尬情况。

(2) 传递实参(本部分内容不易理解，但十分重要！！)
	1.按值传递：例如int foo(int n)，在调用foo时，程序会把参数复制一份给n。这样，对n的任何修改都不会反映到调用foo的参数上面。
	对于按值传递数组，一定要慎重。因为复制数组的元素要浪费很多时间。
	2.传递指针：例如int foo(int *n)。对n的修改会反映到调用foo的参数上面。
		修改n的值时要注意，必须用取值运算符，否则改变的是n指向的内存空间 。
		此外，这种方法可以用于传递数组——调用时只需把数组名作为参数。这时不需要取值运算符。
	3.传递引用：例如int foo(int &n)。
	优点是既可以直接修改调用foo的参数，又不会带来指针的麻烦(无需取值运算符)。缺点是不能传入常数或表达式。
